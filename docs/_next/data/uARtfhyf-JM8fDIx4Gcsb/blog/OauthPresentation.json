{"pageProps":{"post":{"slug":"OauthPresentation","contentHtml":"<h1>OAuth2.0 and OpenID in .NET</h1>\n<p><em>By Seth Rhodes</em></p>\n<hr>\n<h2>Who am I?</h2>\n<p>Hey! üëã I'm a junior developer with experience building web and mobile apps.</p>\n<ul>\n<li>I‚Äôve worked with Python, React, and more recently, C# and .NET.</li>\n<li>I love learning ‚Äî whether it's something technical, artistic, or cultural.</li>\n<li>My hobbies include learning new languages, training in combat sports, eating pizza, and occasionally reading.</li>\n</ul>\n<hr>\n<h2>The Problem</h2>\n<p>The ASP.NET Core Identity library is powerful, but it can be tricky to set up custom OAuth and OpenID workflows.</p>\n<blockquote>\n<p>Learning the OAuth2.0 standard and the basics of the Identity library will set you up to connect to <em>any</em> OAuth provider out there ‚Äî whether it has a pre-built library or not.</p>\n</blockquote>\n<hr>\n<h2>What This Covers</h2>\n<ul>\n<li>A quick breakdown of OAuth2.0 and OpenID terms</li>\n<li>Google OAuth2.0 + OpenID using the built-in ASP.NET Core Identity library</li>\n<li>A custom OAuth2.0 workflow (using Google as an example)</li>\n</ul>\n<hr>\n<h2>Time to Define Some Terms</h2>\n<h3>Authentication</h3>\n<p>Verifying someone <em>is who they say they are</em></p>\n<blockquote>\n<p><em>Think of a passport</em>\r\n<img src=\"https://images.vexels.com/media/users/3/128400/isolated/lists/c9db2601b0265cecee08dbfd903ef0ab-passport-travel-icon.png\" alt=\"passport\" title=\"passport\"></p>\n</blockquote>\n<h3>Authorization</h3>\n<p>Verifying someone <em>has access to a specific resource</em></p>\n<blockquote>\n<p><em>Think of the visa in the passport</em>\r\n<img src=\"https://www.basecamphike.com/wp-content/uploads/2020/06/tourist-visa-nepal.png\" alt=\"visa\" title=\"visa\"></p>\n</blockquote>\n<h3>OAuth2.0</h3>\n<p>OAuth2.0 is the industry-standard protocol for authorization ‚Äî letting users grant access without sharing passwords.</p>\n<pre><code class=\"language-text\">+--------+                               +---------------+\r\n|        |--(A)- Authorization Request ->|   Resource    |\r\n|        |                               |     Owner     |\r\n|        |&#x3C;-(B)-- Authorization Grant ---|               |\r\n|        |                               +---------------+\r\n|        |\r\n|        |--(C)-- Authorization Grant -->| Authorization |\r\n| Client |                               |     Server    |\r\n|        |&#x3C;-(D)----- Access Token -------|               |\r\n|        |\r\n|        |--(E)----- Access Token ------>|    Resource   |\r\n|        |                               |     Server    |\r\n|        |&#x3C;-(F)--- Protected Resource ---|               |\r\n+--------+                               +---------------+\n</code></pre>\n<h3>Access Tokens</h3>\n<ul>\n<li>Credentials used to access protected resources</li>\n<li>Represent authorization, scope, and lifespan</li>\n<li>Replace usernames and passwords with a simple, secure token</li>\n<li>May include cryptographic properties depending on the server</li>\n</ul>\n<h3>Refresh Tokens</h3>\n<ul>\n<li>Issued by the auth server</li>\n<li>Used to get new access tokens when old ones expire</li>\n<li>Never sent to resource servers</li>\n<li>Help keep users logged in without asking them to reauthenticate</li>\n</ul>\n<h3>OpenID</h3>\n<p>OpenID is an <em>authentication layer</em> built on top of OAuth2.0.</p>\n<ul>\n<li>Gives a secure, verifiable answer to:\n<blockquote>\n<p>\"Who is the person currently using this browser or app?\"</p>\n</blockquote>\n</li>\n<li>Developers love it because it:\n<ul>\n<li>Removes the need to store or manage passwords</li>\n<li>Reduces risk of credential-based data breaches</li>\n<li>Works great across platforms (web, mobile, etc.)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>Identity in ASP.NET Core</h2>\n<p>‚ö†Ô∏è We're using Identity <em>in</em> ASP.NET Core,<br>\nbut <strong>not ASP.NET Identity</strong> and <strong>not the Microsoft Identity Platform</strong>.</p>\n<hr>\n<h2>Google External Login with ASP.NET Core</h2>\n<h3>1. Create the Project</h3>\n<pre><code class=\"language-bash\">dotnet new webapp -o GoogleOAuthDemo --auth Individual\n</code></pre>\n<hr>\n<h3>2. Register the App with Google</h3>\n<ol>\n<li>Go to <a href=\"https://console.developers.google.com\">Google Cloud Console</a></li>\n<li>Create a new project</li>\n<li>Go to <strong>OAuth Consent Screen</strong> ‚Üí fill in app details</li>\n<li>Create an <strong>OAuth 2.0 Client ID</strong>\n<ul>\n<li>Application type: <strong>Web</strong></li>\n<li>Redirect URI:\n<pre><code>https://localhost:7182/signin-google\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>What is <code>/signin-google</code>?</strong><br>\nIt‚Äôs the default callback path used by the Google OAuth middleware in ASP.NET Core.</p>\n<hr>\n<h3>3. Add the Google Login NuGet Package</h3>\n<pre><code class=\"language-bash\">dotnet add package Microsoft.AspNetCore.Authentication.Google\n</code></pre>\n<hr>\n<h3>4. Add Google Auth in <code>Program.cs</code></h3>\n<pre><code class=\"language-csharp\">builder.Services.AddAuthentication()\r\n    .AddGoogle(options =>\r\n    {\r\n        options.ClientId = config[\"Authentication:Google:ClientId\"];\r\n        options.ClientSecret = config[\"Authentication:Google:ClientSecret\"];\r\n    });\n</code></pre>\n<hr>\n<h3>5. Add Config to <code>appsettings.json</code> (or User Secrets)</h3>\n<pre><code class=\"language-json\">\"Authentication\": {\r\n  \"Google\": {\r\n    \"ClientId\": \"your-client-id\",\r\n    \"ClientSecret\": \"your-client-secret\"\r\n  }\r\n}\n</code></pre>\n<hr>\n<h3>6. Test It</h3>\n<p>Run the app and click ‚ÄúLogin with Google.‚Äù You‚Äôre in.</p>\n<hr>\n<h2>Custom OAuth Flow (Still Using Google for the Demo)</h2>\n<p>Let‚Äôs say your provider <em>doesn't</em> have a premade library. You can still make it work with <code>.AddOAuth()</code>.</p>\n<hr>\n<h3>1. Register with the Third-Party Provider</h3>\n<p>Same as before ‚Äî we‚Äôll continue using Google for this example.</p>\n<hr>\n<h3>2. Add a Custom OAuth Provider in <code>Program.cs</code></h3>\n<pre><code class=\"language-csharp\">builder.Services.AddAuthentication()\r\n    .AddOAuth(\"Google\", options =>\r\n    {\r\n        options.ClientId = \"...\";\r\n        options.ClientSecret = \"...\";\r\n        options.CallbackPath = \"/signin-google\";\r\n\r\n        options.AuthorizationEndpoint = \"https://accounts.google.com/o/oauth2/v2/auth\";\r\n        options.TokenEndpoint = \"https://oauth2.googleapis.com/token\";\r\n        options.UserInformationEndpoint = \"https://openidconnect.googleapis.com/v1/userinfo\";\r\n\r\n        options.Scope.Add(\"openid\");\r\n        options.Scope.Add(\"profile\");\r\n        options.Scope.Add(\"email\");\r\n\r\n        options.ClaimActions.MapJsonKey(ClaimTypes.NameIdentifier, \"sub\");\r\n        options.ClaimActions.MapJsonKey(ClaimTypes.Name, \"name\");\r\n        options.ClaimActions.MapJsonKey(ClaimTypes.Email, \"email\");\r\n\r\n        options.Events = new OAuthEvents\r\n        {\r\n            OnCreatingTicket = async context =>\r\n            {\r\n                var idToken = context.TokenResponse.Response?.RootElement.GetString(\"id_token\");\r\n                var handler = new JwtSecurityTokenHandler();\r\n                var token = handler.ReadJwtToken(idToken);\r\n\r\n                foreach (var claim in token.Claims)\r\n                {\r\n                    context.Identity?.AddClaim(claim);\r\n                }\r\n            }\r\n        };\r\n    });\n</code></pre>\n<p>This pattern works not only for Google, but for <strong>any</strong> standards-compliant OAuth2/OpenID provider.</p>\n<hr>\n<h3>3. Test</h3>\n<p>Run the app and login. Same Google sign-in ‚Äî but now <strong>you built the OAuth flow yourself.</strong></p>\n<hr>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-9.0\">Intro to Identity on ASP.NET Core</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-9.0\">Google External Login in ASP.NET Core</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/additional-claims?view=aspnetcore-9.0\">Add Claims and Tokens from External Providers</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/security/authentication/\">ASP.NET Core Authentication Overview</a></li>\n<li><a href=\"https://oauth.net/2/\">OAuth2.0 Explained</a></li>\n</ul>\n<hr>\n<h2>Final Thoughts</h2>\n<p>OAuth2.0 and OpenID might sound intimidating at first ‚Äî but once you understand the flow and build a working example, you‚Äôre set for almost any modern app.</p>\n<p>Whether you're using a prebuilt library or setting up a custom provider, this knowledge gives you the flexibility to integrate secure, standards-based login with confidence.</p>\n<hr>\n","title":"Oauth2.0 and OpenID in .NET","date":"2025-04-11","description":"This is a presentation on OAuth2.0 and OpenID integration in .NET. Specifically with ASP.NET Core Identity and the Google Oauth2.0 provider."}},"__N_SSG":true}